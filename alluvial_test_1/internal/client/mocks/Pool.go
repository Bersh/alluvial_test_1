// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/bersh/alluvial_test_1/internal/client"

	mock "github.com/stretchr/testify/mock"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

// CheckAllHealth provides a mock function with no fields
func (_m *Pool) CheckAllHealth() {
	_m.Called()
}

// CheckClientHealth provides a mock function with given fields: _a0
func (_m *Pool) CheckClientHealth(_a0 *client.Client) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckClientHealth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*client.Client) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllClients provides a mock function with no fields
func (_m *Pool) GetAllClients() []*client.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllClients")
	}

	var r0 []*client.Client
	if rf, ok := ret.Get(0).(func() []*client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Client)
		}
	}

	return r0
}

// GetAvailableClients provides a mock function with no fields
func (_m *Pool) GetAvailableClients() []*client.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableClients")
	}

	var r0 []*client.Client
	if rf, ok := ret.Get(0).(func() []*client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Client)
		}
	}

	return r0
}

// HasAvailableClients provides a mock function with no fields
func (_m *Pool) HasAvailableClients() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasAvailableClients")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// QueryBalanceFromAllClients provides a mock function with given fields: ctx, address, blockParam
func (_m *Pool) QueryBalanceFromAllClients(ctx context.Context, address string, blockParam string) ([]client.BalanceResponse, error) {
	ret := _m.Called(ctx, address, blockParam)

	if len(ret) == 0 {
		panic("no return value specified for QueryBalanceFromAllClients")
	}

	var r0 []client.BalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]client.BalanceResponse, error)); ok {
		return rf(ctx, address, blockParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []client.BalanceResponse); ok {
		r0 = rf(ctx, address, blockParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.BalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, address, blockParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetClientAvailability provides a mock function with given fields: clientName, isAvailable
func (_m *Pool) SetClientAvailability(clientName string, isAvailable bool) {
	_m.Called(clientName, isAvailable)
}

// NewPool creates a new instance of Pool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pool {
	mock := &Pool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
